// Copyright Eric Chauvin 2022 - 2023.


// This is licensed under the GNU General
// Public License (GPL).  It is the
// same license that Linux has.
// https://www.gnu.org/licenses/gpl-3.0.html


//===============
// Fix this and make it have its own class.
// This file has the .inner extension because
// I'm making a class that is hidden inside a
// .cpp file so that it can only be seen inside
// that compilation unit.  It does not get
// #included in anything else.  So nothing
// else sees it.  It's not an inner class or
// a nested class, but a class used by one
// class in one .cpp file.


// -Wno-unsafe-buffer-usage

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"


class SocketGetAddress
  {
  private:
  struct addrinfo* resultList = nullptr;
  struct addrinfo* nextResultPt = nullptr;
  struct addrinfo hints;

  public:
  SocketGetAddress( void );
  ~SocketGetAddress( void );
  bool getAddressInfo( const CharBuf& domain,
                       const CharBuf& port,
                       const bool isServer,
                       const bool useIPv4Only );

  inline sockaddr* getSockAddrPt( void )
    {
    if( nextResultPt == nullptr )
      return nullptr;

    return nextResultPt->ai_addr;
    }

  inline Uint64 getAddrLength( void )
    {
    if( nextResultPt == nullptr )
      return 0;

    return nextResultPt->ai_addrlen;
    }

  inline const char* getCanonName( void )
    {
    if( nextResultPt == nullptr )
      return nullptr;

    return nextResultPt->ai_canonname;
    }

  bool moveToNextAddr( void );

  static bool getAddressBuf( CharBuf& charBuf,
                             struct sockaddr* sa );

  inline Int32 getFamily( void )
    {
    if( nextResultPt == nullptr )
      return -1;

    return nextResultPt->ai_family;
    }

  inline Int32 getSockType( void )
    {
    if( nextResultPt == nullptr )
      return -1;

    return nextResultPt->ai_socktype;
    }

  inline Int32 getProtocol( void )
    {
    if( nextResultPt == nullptr )
      return -1;

    return nextResultPt->ai_protocol;
    }

  };


SocketGetAddress::SocketGetAddress( void )
{
}


SocketGetAddress::~SocketGetAddress( void )
{
if( resultList != nullptr )
  {
  freeaddrinfo( resultList );
  resultList = nullptr;
  }
}


bool SocketGetAddress::getAddressInfo(
                           const CharBuf& domain,
                           const CharBuf& port,
                           const bool isServer,
                           const bool useIPv4Only )
{
// StIO::putS( "getAddressInfo called." );

// result points to the first struct in the
// linked list.
// The getaddrinfo() function creates the space
// to put the data it gets, and then result
// points to that space it created. So calling
// freeaddrinfo( result ) frees up that space
// that it created.

// memset( &hints, 0, sizeof( hints ));
ZeroMemory( &hints, sizeof( hints ) );

// It's unspecified so it's either IPV4 or IPV6.
// or AF_UNSPEC.
// AF_INET6 is IPv6.
if( useIPv4Only )
  hints.ai_family = AF_INET; // IPv4
else
  hints.ai_family = AF_UNSPEC;

hints.ai_socktype = SOCK_STREAM;
hints.ai_protocol = IPPROTO_TCP;


if( isServer )
  hints.ai_flags = AI_PASSIVE;


// Port 443 for https.

OpenCharArray openCharDomain;
OpenCharArray openCharPort;
domain.copyToOpenCharArrayNull( openCharDomain );
port.copyToOpenCharArrayNull( openCharPort );

Int32 status = getaddrinfo(
              openCharDomain.cArray,
              openCharPort.cArray, // "443"
              // Pass it the address of the
              // hints struct.
              &hints,
              // Pass it the address of the
              // pointer so that it can tell
              // you where it allocated memory.
              &resultList );

if( status != 0 )
  {
  StIO::putS( "SocketsApi getaddrinfo error." );

  // 11001 is host not found.
  Int32 error = WSAGetLastError();

  if( error == WSAHOST_NOT_FOUND )
    StIO::putS( "Host not found." );

  return false;
  }

if( resultList == nullptr )
  StIO::putS( "resultList can't be right." );

// Set it to the first result.
nextResultPt = resultList;
return true;
}



bool SocketGetAddress::moveToNextAddr( void )
{
if( nextResultPt == nullptr )
  return false;

nextResultPt = nextResultPt->ai_next;
if( nextResultPt == nullptr )
  return false;

return true;
}



bool SocketGetAddress::getAddressBuf(
                             CharBuf& charBuf,
                             struct sockaddr* sa )
{
CharBuf fromCBuf;

// struct in_addr {
// Uint32 s_addr;
// };

// Size of struct sockaddr_storage.
// #define _SS_SIZE 128

//struct sockaddr_storage {
// sa_family_t ss_family;
// filler up to the 128 bytes.
// };

// For IPv4.
// struct sockaddr_in {
//        short   sin_family;
//        u_short sin_port;
//        struct  in_addr sin_addr;
//        char    sin_zero[8];
// };

// For IPv6.
// struct sockaddr_in6 {
//        u_short   sin6_family;
//        u_short sin6_port;
//        u_short sin6_flowinfo;
//        struct  in6_addr sin6_addr;
//        Uint32 sin6_scope_id;
// };

// getpeername()

void* sinAddress = nullptr;

if( sa == nullptr )
  {
  StIO::putS( "The sa was null in getAddressStr." );
  return false;
  }

if( !( (sa->sa_family == AF_INET) ||
       (sa->sa_family == AF_INET6)) )
  {
  StIO::putS( "The sa_family is not right." );
  return false;
  }

if( sa->sa_family == AF_INET )
  {
  // StIO::putS( "IPv4 address:" );
  sinAddress =
         &(((struct sockaddr_in*)sa)->sin_addr);
  }
else
  {
  // AF_INET6
  // StIO::putS( "IPv6 address:" );
  sinAddress =
    &(((struct sockaddr_in6*)sa)->sin6_addr );
  }

const Int32 bufLast = 1024;
char returnS[bufLast];

// inet_pton()

// In WS2tcpip.h
if( nullptr == inet_ntop( sa->sa_family,
            sinAddress,
            returnS, sizeof( returnS ) ))
  {
  StIO::putS( "Error getting the address string." );
  return false;
  }

for( Int32 count = 0; count < bufLast; count++ )
  {
  if( returnS[count] == 0 )
    break;

  fromCBuf.appendChar( returnS[count] );
  }

StIO::putCharBuf( fromCBuf );
StIO::putS( " " );

charBuf.copy( fromCBuf );

return true;
}

#pragma clang diagnostic pop

